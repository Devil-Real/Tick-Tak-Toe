<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Tic Tac Toe - Match of 5</title>
  <style>
    body {
      background: #0f2027;
      background: linear-gradient(to right, #2c5364, #203a43, #0f2027);
      color: #fff;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }
    .game-container {
      text-align: center;
    }
    h1 {
      margin-bottom: 20px;
    }
    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      gap: 10px;
      justify-content: center;
      margin-top: 20px;
    }
    .cell {
      width: 100px;
      height: 100px;
      background-color: #1f4068;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2rem;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .cell:hover {
      background-color: #162c3d;
    }
    .status, .scoreboard {
      margin-top: 20px;
      font-size: 1.2rem;
    }
    .reset-btn, .start-btn {
      margin-top: 15px;
      padding: 10px 20px;
      font-size: 1rem;
      border: none;
      border-radius: 5px;
      background-color: #3a6073;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .reset-btn:hover, .start-btn:hover {
      background-color: #305063;
    }
    .difficulty-select {
      margin-top: 15px;
      font-size: 1rem;
      padding: 10px;
      border-radius: 5px;
      border: none;
      background-color: #1f4068;
      color: white;
    }
  </style>
</head>
<body>
  <div class="game-container">
    <h1>Tic Tac Toe - Best of 5</h1>
    <div>
      <label for="difficulty">Select Difficulty:</label>
      <select id="difficulty" class="difficulty-select">
        <option value="easy">Easy</option>
        <option value="medium">Medium</option>
        <option value="hard">Hard</option>
      </select>
      <button class="start-btn" onclick="startMatch()">Start Match</button>
    </div>
    <div class="board" id="board" style="display: none;"></div>
    <div class="status" id="status"></div>
    <div class="scoreboard" id="scoreboard"></div>
    <button class="reset-btn" onclick="resetGame()" style="display: none;">Reset Game</button>
  </div>

  <script>
    const board = document.getElementById("board");
    const statusDiv = document.getElementById("status");
    const scoreboard = document.getElementById("scoreboard");
    const resetBtn = document.querySelector(".reset-btn");
    let cells = [];
    let currentPlayer = "X";
    let gameActive = true;
    let difficulty = "easy";
    let roundCount = 0;
    let playerScore = 0;
    let computerScore = 0;

    const winningCombos = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6],
    ];

    function startMatch() {
      difficulty = document.getElementById("difficulty").value;
      document.querySelector(".start-btn").style.display = "none";
      document.getElementById("difficulty").style.display = "none";
      board.style.display = "grid";
      resetBtn.style.display = "inline-block";
      createBoard();
      updateStatus();
    }

    function createBoard() {
      board.innerHTML = "";
      cells = [];
      for (let i = 0; i < 9; i++) {
        const cell = document.createElement("div");
        cell.classList.add("cell");
        cell.dataset.index = i;
        cell.addEventListener("click", handleCellClick);
        board.appendChild(cell);
        cells.push(cell);
      }
    }

    function handleCellClick(e) {
      const cell = e.target;
      if (cell.textContent || !gameActive || currentPlayer !== "X") return;

      cell.textContent = "X";
      if (checkWin("X")) {
        playerScore++;
        endRound("Player wins this round! üéâ");
        return;
      }
      if (isDraw()) {
        endRound("It's a draw! ü§ù");
        return;
      }
      currentPlayer = "O";
      updateStatus();
      setTimeout(computerMove, 500);
    }

    function computerMove() {
      let move;
      if (difficulty === "easy") move = randomMove();
      else if (difficulty === "medium") move = mediumMove();
      else move = bestMove();

      if (move !== null) {
        cells[move].textContent = "O";
        if (checkWin("O")) {
          computerScore++;
          endRound("Computer wins this round! ü§ñ");
          return;
        }
        if (isDraw()) {
          endRound("It's a draw! ü§ù");
          return;
        }
        currentPlayer = "X";
        updateStatus();
      }
    }

    function updateStatus() {
      statusDiv.textContent = `Round ${roundCount + 1} ‚Äî Current Turn: ${currentPlayer}`;
      scoreboard.textContent = `Score - You: ${playerScore} | Computer: ${computerScore}`;
    }

    function checkWin(player) {
      return winningCombos.some(combo => combo.every(index => cells[index].textContent === player));
    }

    function isDraw() {
      return cells.every(cell => cell.textContent);
    }

    function endRound(message) {
      gameActive = false;
      statusDiv.textContent = message;
      scoreboard.textContent = `Score - You: ${playerScore} | Computer: ${computerScore}`;
      roundCount++;
      if (playerScore === 3 || computerScore === 3 || roundCount === 5) {
        statusDiv.textContent += `\nGame Over! ${playerScore > computerScore ? "You Win üèÜ" : playerScore < computerScore ? "Computer Wins ü§ñ" : "It's a Tie!"}`;
        return;
      }
      setTimeout(() => {
        createBoard();
        gameActive = true;
        currentPlayer = "X";
        updateStatus();
      }, 1500);
    }

    function resetGame() {
      playerScore = 0;
      computerScore = 0;
      roundCount = 0;
      gameActive = true;
      currentPlayer = "X";
      board.style.display = "none";
      document.querySelector(".start-btn").style.display = "inline-block";
      document.getElementById("difficulty").style.display = "inline-block";
      statusDiv.textContent = "";
      scoreboard.textContent = "";
      cells = [];
    }

    function randomMove() {
      const available = cells.map((cell, i) => cell.textContent === "" ? i : null).filter(i => i !== null);
      return available[Math.floor(Math.random() * available.length)] || null;
    }

    function mediumMove() {
      // Take win if available
      for (let i = 0; i < 9; i++) {
        if (!cells[i].textContent) {
          cells[i].textContent = "O";
          if (checkWin("O")) {
            cells[i].textContent = "";
            return i;
          }
          cells[i].textContent = "";
        }
      }
      // Block player win
      for (let i = 0; i < 9; i++) {
        if (!cells[i].textContent) {
          cells[i].textContent = "X";
          if (checkWin("X")) {
            cells[i].textContent = "";
            return i;
          }
          cells[i].textContent = "";
        }
      }
      return randomMove();
    }

    function bestMove() {
      let bestScore = -Infinity;
      let move = null;
      for (let i = 0; i < 9; i++) {
        if (!cells[i].textContent) {
          cells[i].textContent = "O";
          let score = minimax(cells, 0, false);
          cells[i].textContent = "";
          if (score > bestScore) {
            bestScore = score;
            move = i;
          }
        }
      }
      return move;
    }

    function minimax(boardState, depth, isMaximizing) {
      if (checkWin("O")) return 10 - depth;
      if (checkWin("X")) return depth - 10;
      if (isDraw()) return 0;

      if (isMaximizing) {
        let maxEval = -Infinity;
        for (let i = 0; i < 9; i++) {
          if (!boardState[i].textContent) {
            boardState[i].textContent = "O";
            let eval = minimax(boardState, depth + 1, false);
            boardState[i].textContent = "";
            maxEval = Math.max(maxEval, eval);
          }
        }
        return maxEval;
      } else {
        let minEval = Infinity;
        for (let i = 0; i < 9; i++) {
          if (!boardState[i].textContent) {
            boardState[i].textContent = "X";
            let eval = minimax(boardState, depth + 1, true);
            boardState[i].textContent = "";
            minEval = Math.min(minEval, eval);
          }
        }
        return minEval;
      }
    }
  </script>
</body>
</html>
